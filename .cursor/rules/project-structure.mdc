---
description: project structure
globs: 
alwaysApply: false
---
# 최저가 검색 Agent 프로젝트 구조

## 🏗️ 전체 프로젝트 구조

```
videcoding/
├── backend/                    # FastAPI 백엔드
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py            # FastAPI 앱 진입점
│   │   ├── config/            # 설정 레이어
│   │   │   ├── __init__.py
│   │   │   ├── settings.py    # 환경 설정
│   │   │   ├── database.py    # 데이터베이스 설정
│   │   │   └── logging.py     # 로깅 설정
│   │   ├── api/               # API 레이어
│   │   │   ├── __init__.py
│   │   │   ├── deps.py        # 의존성 주입
│   │   │   ├── middleware.py  # 미들웨어
│   │   │   └── v1/            # API 버전 관리
│   │   │       ├── __init__.py
│   │   │       ├── router.py  # 메인 라우터
│   │   │       └── endpoints/
│   │   │           ├── __init__.py
│   │   │           ├── search.py     # 상품 검색 API
│   │   │           ├── session.py    # 세션 관리 API
│   │   │           ├── history.py    # 검색 히스토리 API
│   │   │           └── health.py     # 헬스체크 API
│   │   ├── core/              # 핵심 비즈니스 로직 레이어
│   │   │   ├── __init__.py
│   │   │   ├── agent/         # AI Agent 관련
│   │   │   │   ├── __init__.py
│   │   │   │   ├── langgraph_agent.py    # LangGraph Agent 구현
│   │   │   │   ├── memory_manager.py     # 로컬 메모리 모듈
│   │   │   │   ├── state_models.py       # Agent 상태 모델
│   │   │   │   └── workflows/            # Agent 워크플로우
│   │   │   │       ├── __init__.py
│   │   │   │       ├── parse_query.py    # 쿼리 파싱 노드
│   │   │   │       ├── search_parallel.py # 병렬 검색 노드
│   │   │   │       ├── calculate_prices.py # 가격 계산 노드
│   │   │   │       └── format_response.py # 응답 포맷팅 노드
│   │   │   ├── search/        # 검색 엔진 레이어
│   │   │   │   ├── __init__.py
│   │   │   │   ├── coordinator.py        # 검색 코디네이터
│   │   │   │   ├── product_matcher.py    # 상품 매칭 알고리즘
│   │   │   │   ├── price_calculator.py   # 가격 계산 엔진
│   │   │   │   └── parallel_processor.py # 병렬 처리 엔진
│   │   │   ├── scrapers/      # 데이터 수집 레이어
│   │   │   │   ├── __init__.py
│   │   │   │   ├── base_scraper.py       # 기본 스크래퍼 인터페이스
│   │   │   │   ├── coupang_scraper.py    # 쿠팡 스크래퍼
│   │   │   │   ├── eleven_scraper.py     # 11번가 스크래퍼
│   │   │   │   ├── gmarket_scraper.py    # 지마켓 스크래퍼
│   │   │   │   ├── naver_scraper.py      # 네이버쇼핑 스크래퍼
│   │   │   │   └── factory.py            # 스크래퍼 팩토리
│   │   │   └── services/      # 서비스 레이어
│   │   │       ├── __init__.py
│   │   │       ├── search_service.py     # 검색 서비스
│   │   │       ├── session_service.py    # 세션 서비스
│   │   │       ├── history_service.py    # 히스토리 서비스
│   │   │       └── cache_service.py      # 캐시 서비스
│   │   ├── models/            # 데이터 모델 레이어
│   │   │   ├── __init__.py
│   │   │   ├── database/      # 데이터베이스 모델
│   │   │   │   ├── __init__.py
│   │   │   │   ├── search_history.py    # 검색 히스토리 모델
│   │   │   │   ├── user_session.py      # 세션 모델
│   │   │   │   └── product_cache.py     # 상품 캐시 모델
│   │   │   ├── schemas/       # API 스키마 (Pydantic)
│   │   │   │   ├── __init__.py
│   │   │   │   ├── search.py            # 검색 관련 스키마
│   │   │   │   ├── session.py           # 세션 관련 스키마
│   │   │   │   ├── response.py          # 응답 스키마
│   │   │   │   └── base.py              # 기본 스키마
│   │   │   └── domain/        # 도메인 모델
│   │   │       ├── __init__.py
│   │   │       ├── product.py           # 상품 도메인 모델
│   │   │       ├── price.py             # 가격 도메인 모델
│   │   │       └── search_result.py     # 검색 결과 도메인 모델
│   │   ├── external/          # 외부 서비스 연동 레이어
│   │   │   ├── __init__.py
│   │   │   ├── mcp/           # MCP 도구 연동
│   │   │   │   ├── __init__.py
│   │   │   │   ├── client.py            # MCP 클라이언트
│   │   │   │   └── tools/
│   │   │   │       ├── __init__.py
│   │   │   │       └── duckduckgo.py    # DuckDuckGo 검색 도구
│   │   │   ├── llm/           # LLM 연동
│   │   │   │   ├── __init__.py
│   │   │   │   ├── gemini_client.py     # Gemini API 클라이언트
│   │   │   │   └── langsmith_client.py  # LangSmith 클라이언트
│   │   │   └── cache/         # 캐시 레이어
│   │   │       ├── __init__.py
│   │   │       ├── redis_client.py      # Redis 클라이언트
│   │   │       └── memory_cache.py      # 메모리 캐시
│   │   ├── utils/             # 유틸리티 레이어
│   │   │   ├── __init__.py
│   │   │   ├── logger.py      # 로깅 유틸리티
│   │   │   ├── validators.py  # 검증 유틸리티
│   │   │   ├── formatters.py  # 포맷팅 유틸리티
│   │   │   ├── exceptions.py  # 커스텀 예외
│   │   │   └── constants.py   # 상수 정의
│   │   └── tests/             # 테스트 레이어
│   │       ├── __init__.py
│   │       ├── conftest.py    # pytest 설정
│   │       ├── unit/          # 단위 테스트
│   │       │   ├── __init__.py
│   │       │   ├── test_search_service.py
│   │       │   ├── test_scrapers.py
│   │       │   └── test_agent.py
│   │       ├── integration/   # 통합 테스트
│   │       │   ├── __init__.py
│   │       │   ├── test_api_endpoints.py
│   │       │   └── test_external_services.py
│   │       └── e2e/          # E2E 테스트
│   │           ├── __init__.py
│   │           └── test_search_flow.py
│   ├── requirements/          # 의존성 관리
│   │   ├── base.txt          # 기본 의존성
│   │   ├── dev.txt           # 개발 의존성
│   │   └── prod.txt          # 프로덕션 의존성
│   ├── scripts/              # 스크립트
│   │   ├── start.sh          # 서버 시작 스크립트
│   │   ├── test.sh           # 테스트 실행 스크립트
│   │   └── deploy.sh         # 배포 스크립트
│   ├── alembic/              # 데이터베이스 마이그레이션
│   │   ├── versions/
│   │   ├── env.py
│   │   └── alembic.ini
│   ├── Dockerfile            # Docker 이미지 빌드
│   ├── docker-compose.yml    # 로컬 개발 환경
│   ├── .env.example          # 환경 변수 예시
│   └── README.md             # 백엔드 문서
│
├── frontend/                  # Streamlit 프론트엔드
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py           # Streamlit 앱 진입점
│   │   ├── pages/            # 페이지 레이어
│   │   │   ├── __init__.py
│   │   │   ├── home.py       # 메인 검색 페이지
│   │   │   ├── history.py    # 검색 히스토리 페이지
│   │   │   └── settings.py   # 설정 페이지
│   │   ├── components/       # UI 컴포넌트 레이어
│   │   │   ├── __init__.py
│   │   │   ├── search_input.py      # 검색 입력 컴포넌트
│   │   │   ├── result_display.py    # 결과 표시 컴포넌트
│   │   │   ├── progress_indicator.py # 진행 상황 표시
│   │   │   ├── price_comparison.py  # 가격 비교 테이블
│   │   │   └── chat_interface.py    # 채팅 인터페이스
│   │   ├── services/         # 서비스 레이어
│   │   │   ├── __init__.py
│   │   │   ├── api_client.py        # 백엔드 API 클라이언트
│   │   │   ├── stream_handler.py    # 스트리밍 응답 처리
│   │   │   ├── session_manager.py   # 세션 관리
│   │   │   └── state_manager.py     # Streamlit 상태 관리
│   │   ├── utils/            # 유틸리티 레이어
│   │   │   ├── __init__.py
│   │   │   ├── formatting.py        # 데이터 포맷팅
│   │   │   ├── validators.py        # 입력 검증
│   │   │   ├── constants.py         # 상수 정의
│   │   │   └── helpers.py           # 헬퍼 함수
│   │   ├── styles/           # 스타일링 레이어
│   │   │   ├── __init__.py
│   │   │   ├── main.css             # 메인 스타일
│   │   │   ├── components.css       # 컴포넌트 스타일
│   │   │   └── themes.py            # 테마 설정
│   │   └── config/           # 설정 레이어
│   │       ├── __init__.py
│   │       ├── settings.py          # 앱 설정
│   │       └── constants.py         # 설정 상수
│   ├── assets/               # 정적 자산
│   │   ├── images/
│   │   │   ├── logo.png
│   │   │   └── icons/
│   │   └── data/
│   │       └── sample_data.json
│   ├── tests/                # 프론트엔드 테스트
│   │   ├── __init__.py
│   │   ├── test_components.py
│   │   ├── test_services.py
│   │   └── test_utils.py
│   ├── requirements.txt      # Python 의존성
│   ├── Dockerfile           # Docker 이미지
│   ├── .streamlit/          # Streamlit 설정
│   │   └── config.toml
│   └── README.md            # 프론트엔드 문서
│
├── shared/                   # 공유 리소스
│   ├── schemas/              # 공유 스키마
│   │   ├── __init__.py
│   │   ├── api_models.py     # API 모델 정의
│   │   └── constants.py      # 공유 상수
│   ├── utils/                # 공유 유틸리티
│   │   ├── __init__.py
│   │   ├── common.py         # 공통 함수
│   │   └── validators.py     # 공통 검증
│   └── types/                # 공유 타입 정의
│       ├── __init__.py
│       └── search_types.py
│
├── docs/                     # 프로젝트 문서
│   ├── main-interface.svg    # 메인 인터페이스 와이어프레임
│   ├── mobile-layout.svg     # 모바일 레이아웃
│   ├── search-flow.svg       # 검색 플로우
│   ├── wireframe.md          # 와이어프레임 문서
│   ├── api/                  # API 문서
│   │   ├── openapi.json
│   │   └── endpoints.md
│   ├── architecture/         # 아키텍처 문서
│   │   ├── system-design.md
│   │   ├── database-schema.md
│   │   └── deployment.md
│   └── guides/               # 개발 가이드
│       ├── setup.md
│       ├── development.md
│       └── testing.md
│
├── infrastructure/           # 인프라 설정
│   ├── docker/
│   │   ├── docker-compose.dev.yml    # 개발 환경
│   │   ├── docker-compose.prod.yml   # 프로덕션 환경
│   │   └── nginx/
│   │       └── nginx.conf
│   ├── k8s/                  # Kubernetes 매니페스트
│   │   ├── namespace.yaml
│   │   ├── backend-deployment.yaml
│   │   ├── frontend-deployment.yaml
│   │   ├── redis-deployment.yaml
│   │   └── services.yaml
│   └── terraform/            # 인프라 as Code
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
│
├── scripts/                  # 프로젝트 스크립트
│   ├── setup.sh             # 프로젝트 초기 설정
│   ├── dev.sh               # 개발 환경 실행
│   ├── test.sh              # 전체 테스트 실행
│   ├── build.sh             # 빌드 스크립트
│   └── deploy.sh            # 배포 스크립트
│
├── .cursor/                  # Cursor Rules
│   └── rules/
│       ├── problem-definition.mdc    # 문제 정의
│       ├── prd.mdc                   # PRD 문서
│       ├── user-scenarios.mdc        # 사용자 시나리오
│       ├── system-architecture.mdc   # 시스템 아키텍처
│       ├── tech-stack.mdc           # 기술 스택
│       ├── api-spec.mdc             # API 명세서
│       └── project-structure.mdc    # 프로젝트 구조 (현재 파일)
│
├── .github/                  # GitHub 설정
│   ├── workflows/
│   │   ├── ci.yml           # CI/CD 파이프라인
│   │   ├── test.yml         # 테스트 자동화
│   │   └── deploy.yml       # 배포 자동화
│   ├── ISSUE_TEMPLATE/
│   └── PULL_REQUEST_TEMPLATE.md
│
├── .gitignore               # Git 무시 파일
├── .env.example             # 환경 변수 예시
├── docker-compose.yml       # 전체 서비스 컨테이너
├── Makefile                 # 빌드 자동화
└── README.md                # 프로젝트 메인 문서
```

## 🏛️ 레이어 아키텍처 설명

### Backend 레이어 구조

#### 1. **API 레이어** (`/api/`)
- FastAPI 라우터 및 엔드포인트 관리
- HTTP 요청/응답 처리
- 인증 및 권한 검증
- 입력 검증 및 응답 포맷팅

#### 2. **Core 비즈니스 로직 레이어** (`/core/`)
- **Agent**: LangGraph 기반 AI Agent 구현
- **Search**: 검색 엔진 및 가격 비교 로직
- **Scrapers**: 쇼핑몰별 데이터 수집기
- **Services**: 비즈니스 서비스 로직

#### 3. **모델 레이어** (`/models/`)
- **Database**: ORM 모델 (SQLAlchemy 등)
- **Schemas**: API 스키마 (Pydantic)
- **Domain**: 도메인 모델 및 비즈니스 객체

#### 4. **External 레이어** (`/external/`)
- 외부 API 및 서비스 연동
- MCP 도구 통합
- LLM 및 캐시 클라이언트

### Frontend 레이어 구조

#### 1. **페이지 레이어** (`/pages/`)
- Streamlit 페이지 컴포넌트
- 라우팅 및 네비게이션
- 페이지별 상태 관리

#### 2. **컴포넌트 레이어** (`/components/`)
- 재사용 가능한 UI 컴포넌트
- 검색, 결과 표시, 진행 상황 등
- 컴포넌트별 스타일링

#### 3. **서비스 레이어** (`/services/`)
- 백엔드 API 호출
- 스트리밍 데이터 처리
- 세션 및 상태 관리

## 🔧 핵심 파일 설명

### Backend 핵심 파일

- **[main.py](mdc:backend/app/main.py)**: FastAPI 앱 진입점, 미들웨어 설정
- **[langgraph_agent.py](mdc:backend/app/core/agent/langgraph_agent.py)**: LangGraph Agent 구현체
- **[search_service.py](mdc:backend/app/core/services/search_service.py)**: 상품 검색 비즈니스 로직
- **[coordinator.py](mdc:backend/app/core/search/coordinator.py)**: 검색 코디네이터
- **[base_scraper.py](mdc:backend/app/core/scrapers/base_scraper.py)**: 스크래퍼 기본 인터페이스

### Frontend 핵심 파일

- **[main.py](mdc:frontend/app/main.py)**: Streamlit 앱 진입점
- **[api_client.py](mdc:frontend/app/services/api_client.py)**: 백엔드 API 클라이언트
- **[search_input.py](mdc:frontend/app/components/search_input.py)**: 검색 입력 컴포넌트
- **[result_display.py](mdc:frontend/app/components/result_display.py)**: 결과 표시 컴포넌트

### 설정 파일

- **[settings.py](mdc:backend/app/config/settings.py)**: 백엔드 환경 설정
- **[config.toml](mdc:frontend/.streamlit/config.toml)**: Streamlit 설정
- **[docker-compose.yml](mdc:docker-compose.yml)**: 전체 서비스 컨테이너 설정

## 🚀 개발 워크플로우

### 1. 로컬 개발 환경 설정
```bash
# 프로젝트 초기 설정
./scripts/setup.sh

# 개발 환경 실행
./scripts/dev.sh
```

### 2. 백엔드 개발
```bash
cd backend
pip install -r requirements/dev.txt
uvicorn app.main:app --reload --port 8000
```

### 3. 프론트엔드 개발
```bash
cd frontend
pip install -r requirements.txt
streamlit run app/main.py --server.port 8501
```

### 4. 테스트 실행
```bash
# 전체 테스트
./scripts/test.sh

# 백엔드 테스트
cd backend && pytest

# 프론트엔드 테스트
cd frontend && pytest
```

## 📦 배포 구조

### Docker 컨테이너
- **Backend**: FastAPI + Uvicorn
- **Frontend**: Streamlit
- **Redis**: 캐시 서버
- **MongoDB**: 데이터베이스 (선택사항)
- **Nginx**: 리버스 프록시

### Kubernetes 배포
- 각 서비스별 Deployment 및 Service
- ConfigMap 및 Secret 관리
- 스케일링 및 로드 밸런싱

## 참고 파일
- PRD: [prd.mdc](mdc:prd.mdc)
- 기술 스택: [tech-stack.mdc](mdc:tech-stack.mdc)
- 시스템 아키텍처: [system-architecture.mdc](mdc:system-architecture.mdc)
- API 명세서: [api-spec.mdc](mdc:api-spec.mdc)
- 와이어프레임: [wireframe.md](mdc:docs/wireframe.md)
