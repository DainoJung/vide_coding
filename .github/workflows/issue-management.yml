name: 이슈 자동 관리

on:
  issues:
    types: [opened, labeled, assigned]

jobs:
  issue-welcome:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
    - name: 이슈 환영 댓글
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const welcomeMessage = `👋 **VideCoding** 프로젝트에 이슈를 등록해주셔서 감사합니다!

          ## 📋 이슈 처리 과정
          1. **자동 분류**: 이슈 유형에 따라 자동으로 라벨이 부여됩니다
          2. **담당자 할당**: 적절한 담당자가 자동으로 할당됩니다
          3. **우선순위 설정**: 이슈의 중요도에 따라 우선순위가 결정됩니다
          4. **진행 상황 추적**: 이슈 처리 과정을 지속적으로 업데이트합니다

          ## 🔍 다음 단계
          - 관리자가 이슈를 검토하고 적절한 라벨을 추가할 예정입니다
          - 추가 정보가 필요한 경우 댓글로 요청드리겠습니다
          - 진행 상황은 이 이슈에서 계속 업데이트됩니다

          문의사항이 있으시면 언제든 댓글로 남겨주세요! 🚀`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: welcomeMessage
          });

  issue-labeler:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
    - name: 이슈 자동 라벨링
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body ? issue.body.toLowerCase() : '';
          const labels = [];

          // 이슈 유형 기반 라벨링
          if (title.includes('bug') || body.includes('bug') || 
              title.includes('error') || body.includes('error') ||
              title.includes('문제') || body.includes('문제')) {
            labels.push('bug');
          }

          if (title.includes('feature') || body.includes('feature') ||
              title.includes('기능') || body.includes('기능')) {
            labels.push('enhancement', 'feature');
          }

          if (title.includes('docs') || title.includes('documentation') ||
              title.includes('문서') || body.includes('문서')) {
            labels.push('documentation');
          }

          if (title.includes('help') || title.includes('question') ||
              title.includes('도움') || title.includes('질문')) {
            labels.push('question', 'help wanted');
          }

          // 우선순위 라벨링
          if (title.includes('urgent') || title.includes('critical') ||
              title.includes('긴급') || body.includes('긴급')) {
            labels.push('priority: critical');
          } else if (title.includes('important') || title.includes('중요')) {
            labels.push('priority: high');
          } else {
            labels.push('priority: medium');
          }

          // 상태 라벨
          labels.push('status: todo');

          // 초보자용 이슈 판별
          if (title.includes('good first issue') || title.includes('초보자') ||
              body.includes('good first issue') || body.includes('초보자')) {
            labels.push('good first issue');
          }

          // 라벨 적용
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }

  issue-assigner:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
    - name: 이슈 자동 할당
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body ? issue.body.toLowerCase() : '';
          
          // 기본 담당자 목록
          const maintainers = ['DainoJung']; // 실제 GitHub 사용자명으로 변경
          
          // 이슈 유형에 따른 전문 담당자 할당 (향후 확장 가능)
          let assignee = maintainers[0]; // 기본 담당자
          
          // 버그 리포트인 경우
          if (title.includes('bug') || body.includes('bug')) {
            // 버그 전문 담당자가 있다면 할당
            assignee = maintainers[0];
          }
          
          // 기능 요청인 경우
          if (title.includes('feature') || body.includes('feature')) {
            // 기능 개발 담당자가 있다면 할당
            assignee = maintainers[0];
          }
          
          // 담당자 할당
          await github.rest.issues.addAssignees({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            assignees: [assignee]
          });

  issue-status-update:
    if: github.event.action == 'labeled'
    runs-on: ubuntu-latest
    steps:
    - name: 라벨 변경에 따른 상태 댓글
      uses: actions/github-script@v7
      with:
        script: |
          const label = context.payload.label;
          let statusMessage = '';

          switch(label.name) {
            case 'status: in-progress':
              statusMessage = '🔄 **상태 업데이트**: 이슈 처리가 시작되었습니다!';
              break;
            case 'status: review':
              statusMessage = '👀 **상태 업데이트**: 리뷰 단계에 들어갔습니다.';
              break;
            case 'status: done':
              statusMessage = '✅ **상태 업데이트**: 이슈가 완료되었습니다! 확인 후 이슈를 닫아주세요.';
              break;
            case 'priority: critical':
              statusMessage = '🚨 **우선순위**: 이 이슈는 긴급하게 처리됩니다.';
              break;
            case 'help wanted':
              statusMessage = '🙋‍♂️ **도움 요청**: 커뮤니티의 도움이 필요한 이슈입니다.';
              break;
            case 'good first issue':
              statusMessage = '🌱 **첫 기여**: 이 이슈는 첫 기여자에게 적합합니다!';
              break;
          }

          if (statusMessage) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: statusMessage
            });
          } 